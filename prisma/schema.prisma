generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model definitions
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  biography   String?
  nationality String?
  avatarUrl   String?
  coverUrl    String?
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interests     Interest[]
  notifications Notification[]

  posts     Post[]     @relation("UserPosts")
  reposts   Repost[]
  comments  Comment[]
  reactions Reaction[]

  friends                Friendship[] @relation("RequestSender")
  friendRequestsReceived Friendship[] @relation("RequestReceiver")

  conversationsAsUser1 Conversation[] @relation("ConversationUser1")
  conversationsAsUser2 Conversation[] @relation("ConversationUser2")
  messages             Message[]
}

model Interest {
  id     String @id @default(uuid())
  name   String @unique
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id      String           @id @default(uuid())
  userId  String
  type    NotificationType
  content String?
  isRead  Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id     String           @id @default(uuid())
  status FriendshipStatus @default(PENDING)

  requester   User   @relation("RequestSender", fields: [requesterId], references: [id])
  requesterId String

  receiver   User   @relation("RequestReceiver", fields: [receiverId], references: [id])
  receiverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id       String   @id @default(uuid())
  authorId String
  content  String
  imageUrl String[] @default([])
  videoUrl String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User       @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  reactions Reaction[]
  reposts   Repost[]
}

model Comment {
  id       String @id @default(uuid())
  postId   String
  authorId String
  content  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Reaction {
  id     String       @id @default(uuid())
  type   ReactionType @default(LIKE)
  post   Post         @relation(fields: [postId], references: [id])
  postId String
  user   User         @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}

model Repost {
  id     String @id @default(uuid())
  postId String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Conversation {
  id      String @id @default(uuid())
  user1Id String
  user2Id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1    User      @relation("ConversationUser1", fields: [user1Id], references: [id])
  user2    User      @relation("ConversationUser2", fields: [user2Id], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id             String  @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  isRead         Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id])
}

// Enums for reaction types, notification types, and friendship statuses
enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  HAHA
  SAD
}

enum NotificationType {
  NEW_REACTION
  NEW_COMMENT
  NEW_FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
}

enum FriendshipStatus {
  FRIENDS
  PENDING
  ACCEPTED
  BLOCKED
}
